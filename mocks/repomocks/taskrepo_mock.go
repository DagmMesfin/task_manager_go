// Code generated by mockery v2.44.1. DO NOT EDIT.

package repomocks

import (
	domain "task-manager/Domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: task
func (_m *TaskRepository) AddTask(task domain.Task) *domain.AppError {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(domain.Task) *domain.AppError); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id, userid, isadmin
func (_m *TaskRepository) DeleteTask(id string, userid string, isadmin bool) *domain.AppError {
	ret := _m.Called(id, userid, isadmin)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(string, string, bool) *domain.AppError); ok {
		r0 = rf(id, userid, isadmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: isadmin, userid
func (_m *TaskRepository) GetAllTasks(isadmin bool, userid primitive.ObjectID) ([]domain.Task, *domain.AppError) {
	ret := _m.Called(isadmin, userid)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []domain.Task
	var r1 *domain.AppError
	if rf, ok := ret.Get(0).(func(bool, primitive.ObjectID) ([]domain.Task, *domain.AppError)); ok {
		return rf(isadmin, userid)
	}
	if rf, ok := ret.Get(0).(func(bool, primitive.ObjectID) []domain.Task); ok {
		r0 = rf(isadmin, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, primitive.ObjectID) *domain.AppError); ok {
		r1 = rf(isadmin, userid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.AppError)
		}
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: id, isadmin, userid
func (_m *TaskRepository) GetTask(id string, isadmin bool, userid string) (domain.Task, *domain.AppError) {
	ret := _m.Called(id, isadmin, userid)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 domain.Task
	var r1 *domain.AppError
	if rf, ok := ret.Get(0).(func(string, bool, string) (domain.Task, *domain.AppError)); ok {
		return rf(id, isadmin, userid)
	}
	if rf, ok := ret.Get(0).(func(string, bool, string) domain.Task); ok {
		r0 = rf(id, isadmin, userid)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string, bool, string) *domain.AppError); ok {
		r1 = rf(id, isadmin, userid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.AppError)
		}
	}

	return r0, r1
}

// SetTask provides a mock function with given fields: id, updatedTask, isadmin
func (_m *TaskRepository) SetTask(id string, updatedTask domain.Task, isadmin bool) *domain.AppError {
	ret := _m.Called(id, updatedTask, isadmin)

	if len(ret) == 0 {
		panic("no return value specified for SetTask")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(string, domain.Task, bool) *domain.AppError); ok {
		r0 = rf(id, updatedTask, isadmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
