// Code generated by mockery v2.44.1. DO NOT EDIT.

package usecasemock

import (
	context "context"
	domain "task-manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: c, id
func (_m *UserUsecase) DeleteUser(c context.Context, id string) *domain.AppError {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AppError); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// LoginUserDb provides a mock function with given fields: c, user
func (_m *UserUsecase) LoginUserDb(c context.Context, user domain.User) (string, interface{}, *domain.AppError) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for LoginUserDb")
	}

	var r0 string
	var r1 interface{}
	var r2 *domain.AppError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (string, interface{}, *domain.AppError)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) string); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) interface{}); ok {
		r1 = rf(c, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.User) *domain.AppError); ok {
		r2 = rf(c, user)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*domain.AppError)
		}
	}

	return r0, r1, r2
}

// RegisterUserDb provides a mock function with given fields: c, user
func (_m *UserUsecase) RegisterUserDb(c context.Context, user domain.User) *domain.AppError {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUserDb")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) *domain.AppError); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
